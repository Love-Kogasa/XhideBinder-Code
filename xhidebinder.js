// Generated by LiveScript 1.6.0
(function(){
  var isNode, xb, out$ = typeof exports != 'undefined' && exports || this;
  isNode = typeof module === "object";
  out$.xb = xb = {
    encode: (function(){
      function encode(string, isArray){
        var chars, backArray, unis, i$, len$, char, minchar, index;
        isArray == null && (isArray = false);
        chars = string.toString(10).split('');
        backArray = new Array();
        unis = new Array();
        for (i$ = 0, len$ = chars.length; i$ < len$; ++i$) {
          char = chars[i$];
          unis = unis.concat(char.charCodeAt());
        }
        minchar = Math.min.apply(Math, unis);
        backArray = backArray.concat(repeatArray$([0x0], minchar));
        for (index in unis) {
          if (index !== unis.length) {
            backArray = backArray.concat(0x20);
          }
          backArray = backArray.concat(repeatArray$([0x0], unis[index] - minchar));
        }
        if (isArray) {
          return backArray;
        } else if (isNode) {
          return Buffer.from(backArray);
        } else {
          return function(){
            var retv, i$, ref$, len$, code;
            retv = "";
            for (i$ = 0, len$ = (ref$ = backArray).length; i$ < len$; ++i$) {
              code = ref$[i$];
              retv += String.fromCharCode(code);
            }
            return retv;
          }();
        }
      }
      return encode;
    }()),
    decode: (function(){
      function decode(array){
        var backValue, chars, i$, ref$, len$, char;
        backValue = '';
        if (typeof array === "string") {
          chars = array.split(' ');
          for (i$ = 0, len$ = (ref$ = chars.slice(1)).length; i$ < len$; ++i$) {
            char = ref$[i$];
            backValue += String.fromCharCode(char.length + chars[0].length);
          }
        } else if (typeof array === "object") {
          if (Array.isArray(array)) {
            chars = array.join('').split(0x20);
            for (i$ = 0, len$ = (ref$ = chars.slice(1)).length; i$ < len$; ++i$) {
              char = ref$[i$];
              backValue += String.fromCharCode(char.length + chars[0].length);
            }
          } else {
            backValue += xb.decode(array.toJSON().data);
          }
        }
        return backValue;
      }
      return decode;
    }())
  };
  function repeatArray$(arr, n){
    for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
      if (n & 1) r.push.apply(r, arr);
    return r;
  }
}).call(this);
